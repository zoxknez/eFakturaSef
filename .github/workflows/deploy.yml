# Deployment Workflow
name: Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - staging
          - production
      run_migrations:
        description: 'Run database migrations'
        required: false
        type: boolean
        default: true

jobs:
  deploy:
    name: Deploy to ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Set environment variables
        run: |
          if [ "${{ github.event.inputs.environment }}" == "production" ]; then
            echo "API_URL=${{ secrets.PROD_API_URL }}" >> $GITHUB_ENV
            echo "DATABASE_URL=${{ secrets.PROD_DATABASE_URL }}" >> $GITHUB_ENV
          else
            echo "API_URL=${{ secrets.STAGING_API_URL }}" >> $GITHUB_ENV
            echo "DATABASE_URL=${{ secrets.STAGING_DATABASE_URL }}" >> $GITHUB_ENV
          fi

      - name: Create database backup
        if: github.event.inputs.environment == 'production'
        run: |
          echo "💾 Creating database backup..."
          # Add your backup script here
          # Example: pg_dump or cloud backup service

      - name: Install dependencies
        run: |
          cd backend && npm ci --only=production

      - name: Run database migrations
        if: github.event.inputs.run_migrations == 'true'
        run: |
          echo "📊 Running database migrations..."
          cd backend && npx prisma migrate deploy
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: Build application
        run: |
          echo "🏗️ Building application..."
          cd backend && npm run build
          cd ../frontend && npm ci && npm run build
          cd ../shared && npm ci && npm run build

      - name: Deploy to server
        run: |
          echo "🚀 Deploying to ${{ github.event.inputs.environment }}..."
          # Add your deployment script here
          # Examples:
          # - kubectl apply -f k8s/
          # - rsync to server
          # - Cloud deployment (AWS, Azure, GCP)

      - name: Run health checks
        run: |
          echo "🏥 Running post-deployment health checks..."
          sleep 10
          curl -f ${{ env.API_URL }}/health/detailed || exit 1
          curl -f ${{ env.API_URL }}/health/ready || exit 1

      - name: Notify deployment success
        if: success()
        run: |
          echo "✅ Deployment to ${{ github.event.inputs.environment }} successful!"
          # Send notification (Slack, email, etc.)

      - name: Rollback on failure
        if: failure()
        run: |
          echo "❌ Deployment failed! Rolling back..."
          # Add rollback script here

      - name: Update Sentry release
        if: success()
        run: |
          echo "📊 Creating Sentry release..."
          # Example: sentry-cli releases new ${{ github.sha }}

