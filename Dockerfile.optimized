# Optimized multi-stage build for SEF eFakture Application
# Features: Layer caching, build args, security scanning, smaller image size

ARG NODE_VERSION=18-alpine
ARG BUILD_DATE
ARG VERSION
ARG VCS_REF

# Stage 1: Dependencies base (for caching)
FROM node:${NODE_VERSION} AS deps-base
WORKDIR /app
# Copy only package files for better layer caching
COPY package*.json ./
COPY shared/package*.json ./shared/
COPY backend/package*.json ./backend/
COPY frontend/package*.json ./frontend/

# Stage 2: Build shared package
FROM node:${NODE_VERSION} AS shared-builder
WORKDIR /app/shared

# Copy package files first (better caching)
COPY shared/package*.json ./
RUN npm ci --only=production && npm cache clean --force

# Copy source files
COPY shared/tsconfig.json ./
COPY shared/src ./src

# Build
RUN npm run build

# Stage 3: Backend dependencies
FROM node:${NODE_VERSION} AS backend-deps
WORKDIR /app/backend
COPY backend/package*.json ./
RUN npm ci --only=production && npm cache clean --force

# Stage 4: Build backend
FROM node:${NODE_VERSION} AS backend-builder
WORKDIR /app/backend

# Copy package files
COPY backend/package*.json ./
RUN npm ci && npm cache clean --force

# Copy shared package
COPY --from=shared-builder /app/shared/dist ../shared/dist
COPY --from=shared-builder /app/shared/package*.json ../shared/

# Copy source files
COPY backend/tsconfig.json ./
COPY backend/src ./src
COPY backend/prisma ./prisma

# Generate Prisma client
RUN npx prisma generate

# Build TypeScript
RUN npm run build

# Stage 5: Frontend dependencies
FROM node:${NODE_VERSION} AS frontend-deps
WORKDIR /app/frontend
COPY frontend/package*.json ./
RUN npm ci && npm cache clean --force

# Stage 6: Build frontend
FROM node:${NODE_VERSION} AS frontend-builder
WORKDIR /app/frontend

# Copy dependencies from cache
COPY --from=frontend-deps /app/frontend/node_modules ./node_modules

# Copy shared package
COPY --from=shared-builder /app/shared/dist ../shared/dist
COPY --from=shared-builder /app/shared/package*.json ../shared/

# Copy config files
COPY frontend/package*.json ./
COPY frontend/tsconfig.json ./
COPY frontend/vite.config.ts ./
COPY frontend/tailwind.config.js ./
COPY frontend/postcss.config.js ./
COPY frontend/index.html ./

# Copy source files
COPY frontend/src ./src

# Build
ENV NODE_ENV=production
RUN npm run build

# Stage 7: Production image (minimal)
FROM node:${NODE_VERSION} AS production

# Labels for image metadata
LABEL maintainer="SEF eFakture Team" \
      org.opencontainers.image.title="SEF eFakture" \
      org.opencontainers.image.description="Serbian e-Invoice system" \
      org.opencontainers.image.version="${VERSION}" \
      org.opencontainers.image.created="${BUILD_DATE}" \
      org.opencontainers.image.revision="${VCS_REF}"

# Install dumb-init for proper signal handling
RUN apk add --no-cache \
    dumb-init \
    curl \
    && rm -rf /var/cache/apk/*

# Create app user with specific UID/GID
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001 -G nodejs

# Set working directory
WORKDIR /app

# Copy production dependencies only
COPY --from=backend-deps --chown=nodejs:nodejs /app/backend/node_modules ./backend/node_modules

# Copy built backend
COPY --from=backend-builder --chown=nodejs:nodejs /app/backend/dist ./backend/dist
COPY --from=backend-builder --chown=nodejs:nodejs /app/backend/package*.json ./backend/
COPY --from=backend-builder --chown=nodejs:nodejs /app/backend/prisma ./backend/prisma

# Copy built frontend
COPY --from=frontend-builder --chown=nodejs:nodejs /app/frontend/dist ./frontend/dist

# Copy shared package
COPY --from=shared-builder --chown=nodejs:nodejs /app/shared/dist ./shared/dist
COPY --from=shared-builder --chown=nodejs:nodejs /app/shared/package*.json ./shared/

# Copy root package.json
COPY --chown=nodejs:nodejs package*.json ./

# Create necessary directories
RUN mkdir -p /app/backend/logs /app/backend/uploads && \
    chown -R nodejs:nodejs /app/backend/logs /app/backend/uploads

# Switch to non-root user
USER nodejs

# Set environment
ENV NODE_ENV=production \
    PORT=3001

# Expose ports
EXPOSE 3001

# Health check
HEALTHCHECK --interval=30s --timeout=5s --start-period=10s --retries=3 \
  CMD curl -f http://localhost:3001/health || exit 1

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start the application
CMD ["node", "backend/dist/index.js"]

