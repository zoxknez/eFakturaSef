version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: sef-postgres
    environment:
      POSTGRES_DB: sef_efakture
      POSTGRES_USER: sef_user
      POSTGRES_PASSWORD: sef_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sef_user -d sef_efakture"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sef-network

  # Redis for caching and job queue
  redis:
    image: redis:7-alpine
    container_name: sef-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sef-network

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: sef-backend
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://sef_user:sef_password@postgres:5432/sef_efakture
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET}
      WEBHOOK_SECRET: ${WEBHOOK_SECRET}
      SEF_API_KEY: ${SEF_API_KEY}
      FRONTEND_URL: http://localhost:3000
      CORS_ORIGINS: http://localhost:3000,http://localhost:3001
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sef-network

  # Frontend (Nginx)
  frontend:
    image: nginx:alpine
    container_name: sef-frontend
    volumes:
      - ./frontend/dist:/usr/share/nginx/html
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - sef-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: sef-nginx
    volumes:
      - ./docker/nginx/proxy.conf:/etc/nginx/nginx.conf
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
    networks:
      - sef-network

volumes:
  postgres_data:
  redis_data:

networks:
  sef-network:
    driver: bridge
