// Prisma schema file for SEF eFakture application

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id          String   @id @default(uuid())
  pib         String   @unique @db.VarChar(9)
  name        String
  address     String
  city        String
  postalCode  String   @map("postal_code")
  country     String   @default("RS")
  email       String?
  phone       String?
  bankAccount String?  @map("bank_account")
  vatNumber   String?  @map("vat_number")
  
  // SEF Configuration
  sefApiKey       String? @map("sef_api_key")
  sefEnvironment  String? @map("sef_environment") // demo or production
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // Relations
  users    User[]
  invoices Invoice[]
  
  @@map("companies")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  firstName String   @map("first_name")
  lastName  String   @map("last_name")
  password  String
  role      UserRole
  isActive  Boolean  @default(true) @map("is_active")
  companyId String   @map("company_id")
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // Relations
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  @@map("users")
}

model Invoice {
  id            String            @id @default(uuid())
  sefId         String?           @unique @map("sef_id") // SEF assigned ID
  invoiceNumber String            @map("invoice_number")
  issueDate     DateTime          @map("issue_date")
  dueDate       DateTime?         @map("due_date")
  direction     InvoiceDirection
  status        InvoiceStatus     @default(DRAFT)
  documentType  UBLDocumentType   @map("document_type") @default(INVOICE)
  
  // Supplier/Buyer
  supplierId String @map("supplier_id")
  buyerId    String @map("buyer_id")
  
  // Amounts
  subtotal     Decimal @db.Decimal(15, 2)
  totalVat     Decimal @map("total_vat") @db.Decimal(15, 2)
  totalAmount  Decimal @map("total_amount") @db.Decimal(15, 2)
  currency     String  @default("RSD") @db.VarChar(3)
  
  // UBL XML
  ublXml String? @map("ubl_xml") @db.Text
  
  // Timestamps
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")  
  sentAt    DateTime? @map("sent_at")
  
  // Notes
  note String? @db.Text
  
  // Reference documents
  referenceInvoiceId String? @map("reference_invoice_id")
  
  // Company relation
  companyId String @map("company_id")
  
  // Relations
  company           Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  supplier          Company        @relation("SupplierInvoices", fields: [supplierId], references: [id])
  buyer             Company        @relation("BuyerInvoices", fields: [buyerId], references: [id])
  referenceInvoice  Invoice?       @relation("InvoiceReferences", fields: [referenceInvoiceId], references: [id])
  referencedBy      Invoice[]      @relation("InvoiceReferences")
  lines             InvoiceLine[]
  auditLogs         AuditLog[]
  
  @@map("invoices")
}

model InvoiceLine {
  id               String     @id @default(uuid())
  invoiceId        String     @map("invoice_id")
  lineNumber       Int        @map("line_number")
  itemName         String     @map("item_name")
  itemDescription  String?    @map("item_description") @db.Text
  quantity         Decimal    @db.Decimal(15, 4)
  unitOfMeasure    String     @map("unit_of_measure")
  unitPrice        Decimal    @map("unit_price") @db.Decimal(15, 4)
  vatRate          Decimal    @map("vat_rate") @db.Decimal(5, 2)
  vatCategory      VATCategory @map("vat_category")
  lineTotal        Decimal    @map("line_total") @db.Decimal(15, 2)
  vatAmount        Decimal    @map("vat_amount") @db.Decimal(15, 2)
  lineTotalWithVat Decimal    @map("line_total_with_vat") @db.Decimal(15, 2)
  
  // Relations
  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  
  @@map("invoice_lines")
}

model AuditLog {
  id        String   @id @default(uuid())
  entityType String  @map("entity_type") // invoice, user, company, etc.
  entityId   String  @map("entity_id")
  action     String  // created, updated, deleted, sent, cancelled, etc.
  oldData    Json?   @map("old_data")
  newData    Json?   @map("new_data")
  userId     String? @map("user_id")
  ipAddress  String? @map("ip_address")
  userAgent  String? @map("user_agent")
  
  createdAt DateTime @default(now()) @map("created_at")
  
  // Relations
  invoice Invoice? @relation(fields: [entityId], references: [id], onDelete: Cascade)
  
  @@map("audit_logs")
}

model SEFWebhookLog {
  id        String   @id @default(uuid())
  eventType String   @map("event_type")
  sefId     String   @map("sef_id")
  payload   Json
  signature String
  processed Boolean  @default(false)
  error     String?  @db.Text
  
  createdAt DateTime @default(now()) @map("created_at")
  
  @@map("sef_webhook_logs")
}

model JobQueue {
  id          String    @id @default(uuid())
  type        String    // send_invoice, webhook_process, etc.
  payload     Json
  status      JobStatus @default(PENDING)
  attempts    Int       @default(0)
  maxAttempts Int       @default(3) @map("max_attempts")
  error       String?   @db.Text
  scheduledAt DateTime? @map("scheduled_at")
  
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  processedAt DateTime? @map("processed_at")
  
  @@map("job_queue")
}

// Enums
enum UserRole {
  ADMIN
  ACCOUNTANT
  AUDITOR
  OPERATOR
}

enum InvoiceStatus {
  DRAFT
  SENT
  DELIVERED
  ACCEPTED
  REJECTED
  CANCELLED
  STORNO
  EXPIRED
}

enum InvoiceDirection {
  OUTGOING
  INCOMING
}

enum UBLDocumentType {
  INVOICE
  CREDIT_NOTE
  DEBIT_NOTE
}

enum VATCategory {
  STANDARD     // S
  ZERO_RATED   // Z
  EXEMPT       // E
  REVERSE_CHARGE // AE
  NOT_SUBJECT  // O
}

enum JobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}